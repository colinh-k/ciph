#ifndef TEST_AES_HPP_
#define TEST_AES_HPP_

#include "qtest.hpp"
#include "../include/aes.h"

QTEST_CASE(AES, Key128Bit) {
    byte plaintext[] = {
        0x00, 0x11, 0x22, 0x33,
        0x44, 0x55, 0x66, 0x77,
        0x88, 0x99, 0xaa, 0xbb,
        0xcc, 0xdd, 0xee, 0xff
    };
    byte key[] = {
        0x00, 0x01, 0x02, 0x03,
        0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b,
        0x0c, 0x0d, 0x0e, 0x0f
    };
    byte ciphertext[STATE_SIZE];
    // decrypted plaintext
    byte decrypted[STATE_SIZE];

    AES_Encipher(plaintext, key, 4, ciphertext);

    byte eCiphertext[] = {
        0x69, 0xc4, 0xe0, 0xd8,
        0x6a, 0x7b, 0x04, 0x30,
        0xd8, 0xcd, 0xb7, 0x80,
        0x70, 0xb4, 0xc5, 0x5a
    };
    for (size_t i = 0; i < STATE_SIZE; i++) {
        QTEST_EXPECT_EQUALS(eCiphertext[i], ciphertext[i]);
    }

    AES_Decipher(ciphertext, key, 4, decrypted);

    byte eDecrypted[] = {
        0x00, 0x11, 0x22, 0x33,
        0x44, 0x55, 0x66, 0x77,
        0x88, 0x99, 0xaa, 0xbb,
        0xcc, 0xdd, 0xee, 0xff
    };
    for (size_t i = 0; i < STATE_SIZE; i++) {
        QTEST_EXPECT_EQUALS(eDecrypted[i], decrypted[i]);
    }
}

QTEST_CASE(AES, Key192Bit) {
    byte plaintext[] = {
        0x00, 0x11, 0x22, 0x33,
        0x44, 0x55, 0x66, 0x77,
        0x88, 0x99, 0xaa, 0xbb,
        0xcc, 0xdd, 0xee, 0xff
    };
    byte key[] = {
        0x00, 0x01, 0x02, 0x03,
        0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b,
        0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13,
        0x14, 0x15, 0x16, 0x17
    };
    byte ciphertext[STATE_SIZE];
    // decrypted plaintext
    byte decrypted[STATE_SIZE];

    AES_Encipher(plaintext, key, 6, ciphertext);

    byte eCiphertext[] = {
        0xdd, 0xa9, 0x7c, 0xa4,
        0x86, 0x4c, 0xdf, 0xe0,
        0x6e, 0xaf, 0x70, 0xa0,
        0xec, 0x0d, 0x71, 0x91
    };
    for (size_t i = 0; i < STATE_SIZE; i++) {
        QTEST_EXPECT_EQUALS(eCiphertext[i], ciphertext[i]);
    }

    AES_Decipher(ciphertext, key, 6, decrypted);

    byte eDecrypted[] = {
        0x00, 0x11, 0x22, 0x33,
        0x44, 0x55, 0x66, 0x77,
        0x88, 0x99, 0xaa, 0xbb,
        0xcc, 0xdd, 0xee, 0xff
    };
    for (size_t i = 0; i < STATE_SIZE; i++) {
        QTEST_EXPECT_EQUALS(eDecrypted[i], decrypted[i]);
    }
}

QTEST_CASE(AES, Key256Bit) {
    byte plaintext[] = {
        0x00, 0x11, 0x22, 0x33,
        0x44, 0x55, 0x66, 0x77,
        0x88, 0x99, 0xaa, 0xbb,
        0xcc, 0xdd, 0xee, 0xff
    };
    byte key[] = {
        0x00, 0x01, 0x02, 0x03,
        0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b,
        0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13,
        0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b,
        0x1c, 0x1d, 0x1e, 0x1f
    };
    byte ciphertext[STATE_SIZE];
    byte decrypted[STATE_SIZE];

    AES_Encipher(plaintext, key, 8, ciphertext);

    byte eCiphertext[] = {
        0x8e, 0xa2, 0xb7, 0xca,
        0x51, 0x67, 0x45, 0xbf,
        0xea, 0xfc, 0x49, 0x90,
        0x4b, 0x49, 0x60, 0x89
    };
    for (size_t i = 0; i < STATE_SIZE; i++) {
        QTEST_EXPECT_EQUALS(eCiphertext[i], ciphertext[i]);
    }

    AES_Decipher(ciphertext, key, 8, decrypted);

    byte eDecrypted[] = {
        0x00, 0x11, 0x22, 0x33,
        0x44, 0x55, 0x66, 0x77,
        0x88, 0x99, 0xaa, 0xbb,
        0xcc, 0xdd, 0xee, 0xff
    };
    for (size_t i = 0; i < STATE_SIZE; i++) {
        QTEST_EXPECT_EQUALS(eDecrypted[i], decrypted[i]);
    }
}

#endif  // TEST_AES_HPP_